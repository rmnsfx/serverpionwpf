using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data.SqlClient;
using System.Data;

namespace ServerPionWPF
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            Guid gRoot = new Guid("00000000-0000-0000-0000-000000000000");            

            List<Objects> objdata = new List<Objects>();
            objdata = LoadDB();

            //TreeViewItem treeItem = new TreeViewItem() { Header = "Объекты" };
            
            TreeViewItem treeItem = null;

            PopulateTree(treeItem, objdata);



            //foreach (Objects o1 in objdata)

           

            /*foreach (Objects o1 in objdata)
            {

                TreeViewItem treeItem2 = new TreeViewItem() { Header = o1.Name.ToString() };


                if (o1.ParentID.Equals(root))
                {
                    treeItem.Items.Add(treeItem2);

                    foreach (Objects o2 in objdata)
                    {
                        if (o2.ParentID.Equals(o1.ObjectID))
                        {
                            TreeViewItem treeItem3 = new TreeViewItem() { Header = o2.Name.ToString() };
                            treeItem2.Items.Add(treeItem3);

                            foreach (Objects o3 in objdata)
                            {
                                if (o3.ParentID.Equals(o2.ObjectID))
                                {
                                    TreeViewItem treeItem4 = new TreeViewItem() { Header = o3.Name.ToString() };
                                    treeItem3.Items.Add(treeItem4);                                   

                                }


                            }
                        }
                    }

                }   
         
            }*/

            //ObjTree.Items.Add(treeItem);



            


            
        }


        ///////////////////////////////////////////////////////////////////////////////////////////////



        public void PopulateTree(TreeViewItem root, List<Objects> objdata)
        {
            

            if (root == null)
            {
                root = new TreeViewItem();
                root.Name = "Объекты";
                root.Tag = null;  
                
                
                // get all object in the list with parent is null
                
                var details = objdata.Where(t => t.ParentID == null);

                foreach (Objects o1 in objdata)
                {
                    var child = new TreeViewItem()
                    {
                         Header = o1.Name.ToString(),
                         Tag = o1.ObjectID                           
                    };

                    

                    PopulateTree(child, objdata);
                    root.Items.Add(child);
                }
            }
            
            else
            {
                var id = (Guid) root.Tag;
                var details = objdata.Where(t => t.ParentID.Equals(id));

                foreach (Objects o2 in objdata)
                {
                    var child = new TreeViewItem()
                    {
                        Header = o2.Name.ToString() 
                    };
                    PopulateTree(child, objdata);
                    root.Items.Add(child);
                }
            }
        }



        ///////////////////////////////////////////////////////////////////////////////////////////////



        public class Objects
        {
            public Guid ObjectID { get; set; }
            public String Name { get; set; }
            public Guid ParentID { get; set; }
        }


        public static List<Objects> LoadDB()
        {
            List<Objects> objdata = new List<Objects>();                     

          
            string connetionString = "Data Source=192.168.5.140; Initial Catalog=VS; User ID=sa; Password=123";
            
            SqlConnection connection = new SqlConnection(connetionString);
            connection.Open();
            SqlCommand command = new SqlCommand("SELECT * FROM [Objects]", connection);
            SqlDataReader dataReader = command.ExecuteReader();
                       
            
            while (dataReader.Read())
            {
                Objects f = new Objects();

                f.ObjectID = (Guid)dataReader["ObjectID"];
                f.Name = (String)dataReader["Name"];
                f.ParentID = (Guid)dataReader["ParentID"];

                objdata.Add(f);
            }

            connection.Close();

            return objdata;            
        }

       
        public static void LoadDb2 ()
        {

            DataTable dataTable = new DataTable();

            SqlConnection conn = new SqlConnection(@"Data Source=192.168.5.140; Initial Catalog=VS; User ID=sa; Password=123");
            SqlCommand cmd = new SqlCommand("select * from Objects", conn);
            SqlDataReader data;

            conn.Open();
            data = cmd.ExecuteReader();

            dataTable.Load(data);

            /*while (data.Read())
            {
                objects.Add(data.GetOrdinal());
                    
            }*/
            data.Close();



            // Example 1 - Print your  Column Headers
            String columns = string.Empty;
            foreach (DataColumn column in dataTable.Columns)
            {
                columns += column.ColumnName + " | ";
            }

            //text1.Text = Convert.ToString(columns);



            // Example 2 - Print the first 10 row of data
            int topRows = 10;
            for (int i = 0; i < topRows; i++)
            {
                String rowText = string.Empty;
                foreach (DataColumn column in dataTable.Columns)
                {
                    rowText += dataTable.Rows[i][column.ColumnName] + " | ";
                }
                //text1.Text += Convert.ToString(rowText);
            }


            //dataGrid.ItemsSource = dataTable.AsDataView();
                

        }

        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {

        }
    }
}
